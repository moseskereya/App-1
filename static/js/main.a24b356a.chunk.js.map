{"version":3,"sources":["Components/Comp1.js","App.js","serviceWorker.js","index.js"],"names":["App1","props","changeHandler","e","setState","target","name","value","submitHandler","preventDefault","console","log","state","axios","post","then","response","letters","data","error","StartWith","include","endsWith","WordMaxLength","WordMinLength","this","className","onSubmit","htmlFor","type","onChange","placeholder","length","map","letter","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wSAsGeA,E,YAnGX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAWVC,cAAgB,SAACC,GACb,EAAKC,SAAL,eAAgBD,EAAEE,OAAOC,KAAQH,EAAEE,OAAOE,SAb3B,EAenBC,cAAgB,SAACL,GACbA,EAAEM,iBACFC,QAAQC,IAAI,EAAKC,OACjBC,IAAMC,KAAK,+GAAgH,EAAKF,OAC/HG,MAAM,SAAAC,GACHN,QAAQC,IAAIK,GACZ,EAAKZ,SAAS,CAACa,QAASD,EAASE,UAGpCH,MAAM,SAAAI,GACHT,QAAQC,IAAIQ,OAvBhB,EAAKP,MAAQ,CACTK,QAAS,GACTG,UAAU,GACVC,QAAQ,GACRC,SAAS,GACTC,cAAe,GACfC,cAAe,IARJ,E,sEA6BT,IAAD,EACgFC,KAAKb,MAAlFK,EADH,EACGA,QAAUG,EADb,EACaA,UAAYE,EADzB,EACyBA,SAAWD,EADpC,EACoCA,QAAUE,EAD9C,EAC8CA,cAAgBC,EAD9D,EAC8DA,cACnE,OACI,6BACI,yBAAKE,UAAU,QACf,0BAAMC,SAAUF,KAAKjB,eACjB,6BACK,2BAAOoB,QAAQ,aAAf,aACD,2BAAOC,KAAK,OAAOvB,KAAK,YAAYC,MAAOa,EAC3CU,SAAUL,KAAKvB,cACjB6B,YAAY,OAGd,2BAAOH,QAAQ,YAAf,YACA,6BACA,2BAAOC,KAAK,GAAGvB,KAAK,WAAWC,MAAOe,EACrCQ,SAAUL,KAAKvB,cACf6B,YAAY,QAGb,2BAAOH,QAAQ,YAAf,YACA,6BACA,2BAAOC,KAAK,OAAOvB,KAAK,UACvBwB,SAAUL,KAAKvB,cAChBK,MAAOc,EACPU,YAAY,SAGZ,2BAAOH,QAAQ,iBAAf,iBACA,6BACA,2BAAOC,KAAK,OAAOvB,KAAK,gBAAgBC,MAAOgB,EAC9CO,SAAUL,KAAKvB,cACf6B,YAAY,OAGb,2BAAOH,QAAQ,iBAAf,iBACA,6BACA,2BAAOC,KAAK,OAAOvB,KAAK,gBACxBwB,SAAUL,KAAKvB,cACfK,MAAOiB,EACPO,YAAY,OAGZ,6BACA,4BAAQF,KAAK,UAAb,YAGJ,6BACC,6BACD,wBAAIH,UAAU,SACbT,EAAQe,OACTf,EAAQgB,KAAI,SAAAC,GAAM,OACd,yBAAKR,UAAU,WACf,0BAAMA,UAAU,eACX,6BAASA,UAAU,WACdQ,QAIX,a,GAzFAC,aCSJC,EARH,WACR,OACI,yBAAKV,UAAU,OACX,kBAAC,EAAD,QCMQW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.a24b356a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from \"axios\"\r\nclass App1 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            letters: [],\r\n            StartWith:'',\r\n            include:'',\r\n            endsWith:'',\r\n            WordMaxLength: '',\r\n            WordMinLength: ''\r\n         }\r\n    }\r\n\r\n    changeHandler = (e) =>{\r\n        this.setState({[e.target.name] : e.target.value})\r\n    }\r\n    submitHandler = (e) =>{\r\n        e.preventDefault();\r\n        console.log(this.state);\r\n        axios.post('https://wordfind.azurewebsites.net/api/English?code=8IZqWCIZi3kVDCXhQnmyvh0EKHvaQsVWN5kJjLnqR4ss4og5HzTL3Q==', this.state)\r\n        .then( response =>{\r\n            console.log(response)\r\n            this.setState({letters: response.data})\r\n        })\r\n\r\n        .then( error =>{\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    render() { \r\n        const { letters , StartWith , endsWith , include , WordMaxLength , WordMinLength } = this.state\r\n        return ( \r\n            <div>\r\n                <div className=\"App1\">\r\n                <form onSubmit={this.submitHandler}>\r\n                    <div>\r\n                         <label htmlFor=\"StartWith\">StartWith</label>\r\n                        <input type=\"text\" name=\"StartWith\" value={StartWith}\r\n                        onChange={this.changeHandler}\r\n                      placeholder=\"C\"\r\n                        />\r\n                    </div>\r\n                    <label htmlFor=\"endsWith\">endsWith</label>\r\n                    <div>\r\n                    <input type=\"\" name=\"endsWith\" value={endsWith}\r\n                     onChange={this.changeHandler}\r\n                     placeholder=\"er\"\r\n                    />\r\n                    </div>\r\n                    <label htmlFor=\"includes\">includes</label>\r\n                    <div>\r\n                    <input type=\"text\" name=\"include\" \r\n                     onChange={this.changeHandler}\r\n                    value={include}\r\n                    placeholder=\"mpu\"\r\n                    />\r\n                    </div>\r\n                    <label htmlFor=\"WordMaxLength\">WordMaxLength</label>\r\n                    <div>\r\n                    <input type=\"text\" name=\"WordMaxLength\" value={WordMaxLength}\r\n                     onChange={this.changeHandler}\r\n                     placeholder=\"9\"\r\n                    />\r\n                    </div>\r\n                    <label htmlFor=\"WordMinLength\">WordMinLength</label>\r\n                    <div>\r\n                    <input type=\"text\" name=\"WordMinLength\" \r\n                    onChange={this.changeHandler}\r\n                    value={WordMinLength}\r\n                    placeholder=\"3\"\r\n                    />\r\n                    </div>\r\n                    <br/>\r\n                    <button type=\"submit\">Submit</button>\r\n                </form>\r\n                </div>\r\n                <div>\r\n                 <div>\r\n                <ul className=\"Slide\">\r\n                {letters.length ?\r\n                letters.map(letter => (\r\n                    <div className=\"slide-2\">\r\n                    <span className=\"inner-slide\">\r\n                         <article className=\"inner-2\">\r\n                             {letter}\r\n                         </article>  \r\n                    </span>\r\n                    </div>\r\n                )):null\r\n                } \r\n                </ul>\r\n               </div>\r\n               \r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default App1;","import React from 'react'\nimport \"./App.css\"\nimport App2 from \"./Components/Comp1\"\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <App2/>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}